package com.github.muehmar;

import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

import javax.validation.Valid;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Email;


/**
 * User of the Application
 */
public class UserDto {
  private final LanguageEnum language;

  @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
  public UserDto(
      @JsonProperty("language") LanguageEnum language) {
    this.language = language;
  }

  /**
   * Preferred language of this user
   * * `GERMAN`: German language
   * * `ENGLISH`: English language
   */
  public enum LanguageEnum {
    GERMAN("GERMAN", "German language"),
    ENGLISH("ENGLISH", "English language");

    private final String value;
    private final String description;

    LanguageEnum(String value, String description) {
      this.value = value;
      this.description = description;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @JsonIgnore
    public String getDescription() {
      return description;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static LanguageEnum fromValue(String value) {
      for (LanguageEnum e : LanguageEnum.values()) {
        if (e.value.equals(value)) {
          return e;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  /**
   * Preferred language of this user
   * * `GERMAN`: German language
   * * `ENGLISH`: English language
   */
  @JsonIgnore
  public Optional<LanguageEnum> getLanguageOptional() {
    return Optional.ofNullable(this.language);
  }

  /**
   * Preferred language of this user
   * * `GERMAN`: German language
   * * `ENGLISH`: English language
   */
  @JsonProperty("language")
  public LanguageEnum getLanguageNullable() {
    return language;
  }

  /**
   * Preferred language of this user
   * * `GERMAN`: German language
   * * `ENGLISH`: English language
   */
  public UserDto withLanguage(LanguageEnum language) {
    return new UserDto(language);
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) {
      return true;
    }
    if (other == null || getClass() != other.getClass()) {
      return false;
    }
    final UserDto v = (UserDto) other;
    return Objects.equals(language, v.language);
  }


  @Override
  public int hashCode() {
    return Objects.hash(language);
  }

  @Override
  public String toString() {
    return "UserDto{" +
      "language=" + language +
      "}";
  }

  public static Builder newBuilder() {
    return new Builder();
  }

  public static final class Builder {

    private LanguageEnum language;

    /**
     * Preferred language of this user
     * * `GERMAN`: German language
     * * `ENGLISH`: English language
     */
    public Builder setLanguage(LanguageEnum language) {
      this.language = language;
      return this;
    }

    /**
     * Preferred language of this user
     * * `GERMAN`: German language
     * * `ENGLISH`: English language
     */
    public Builder setLanguage(Optional<LanguageEnum> language) {
      this.language = language.orElse(null);
      return this;
    }

    public UserDto build() {
      return new UserDto(language);
    }
  }
}