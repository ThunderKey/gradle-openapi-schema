package com.github.muehmar;

import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;

import javax.validation.Valid;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Email;


/**
 * NecessityAndNullability
 */
@JsonDeserialize(builder = NecessityAndNullabilityDto.Builder.class)
public class NecessityAndNullabilityDto {
  private final String requiredStringVal;
  private final String requiredNullableStringVal;
  private final boolean isRequiredNullableStringValPresent;
  private final String optionalStringVal;
  private final String optionalNullableStringVal;
  private final boolean isOptionalNullableStringValNull;

  public NecessityAndNullabilityDto(
      String requiredStringVal,
      String requiredNullableStringVal,
      boolean isRequiredNullableStringValPresent,
      String optionalStringVal,
      String optionalNullableStringVal,
      boolean isOptionalNullableStringValNull
    ) {
    this.requiredStringVal = requiredStringVal;
    this.requiredNullableStringVal = requiredNullableStringVal;
    this.isRequiredNullableStringValPresent = isRequiredNullableStringValPresent;
    this.optionalStringVal = optionalStringVal;
    this.optionalNullableStringVal = optionalNullableStringVal;
    this.isOptionalNullableStringValNull = isOptionalNullableStringValNull;
  }

  /**
   * RequiredStringVal
   */
  @NotNull
  @Pattern(regexp="Hello")
  public String getRequiredStringVal() {
    return requiredStringVal;
  }

  /**
   * RequiredNullableStringVal
   */
  @JsonIgnore
  public Optional<String> getRequiredNullableStringVal() {
    return Optional.ofNullable(requiredNullableStringVal);
  }

  @Pattern(regexp="Hello")
  @JsonProperty("requiredNullableStringVal")
  private String getRequiredNullableStringValNullable() {
    return requiredNullableStringVal;
  }

  @AssertTrue("requiredNullableStringVal is required but it is not present")
  private boolean isRequiredNullableStringValPresent() {
    return isRequiredNullableStringValPresent;
  }

  /**
   * OptionalStringVal
   */
  @JsonIgnore
  public Optional<String> getOptionalStringVal() {
    return Optional.ofNullable(optionalStringVal);
  }

  @JsonProperty("optionalStringVal")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  @Pattern(regexp="Hello")
  private String getOptionalStringValNullable() {
    return optionalStringVal;
  }

  /**
   * OptionalNullableStringVal
   */
  @JsonIgnore
  public Tristate<String> getOptionalNullableStringVal() {
    return Tristate.ofNullableAndNullFlag(optionalNullableStringVal, isOptionalNullableStringValNull);
  }

  @JsonProperty("optionalNullableStringVal")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getOptionalNullableStringValJackson() {
    return isOptionalNullableStringValNull ? new JacksonNullContainer<>(optionalNullableStringVal) : optionalNullableStringVal;
  }

  @Pattern(regexp="Hello")
  private String getOptionalNullableStringValNullable() {
    return optionalNullableStringVal;
  }

  /**
   * RequiredStringVal
   */
  public NecessityAndNullabilityDto withRequiredStringVal(String requiredStringVal) {
    return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, optionalNullableStringVal, isOptionalNullableStringValNull);
  }

  /**
   * RequiredNullableStringVal
   */
  public NecessityAndNullabilityDto withRequiredNullableStringVal(String requiredNullableStringVal) {
    return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, optionalNullableStringVal, isOptionalNullableStringValNull);
  }

  /**
   * OptionalStringVal
   */
  public NecessityAndNullabilityDto withOptionalStringVal(String optionalStringVal) {
    return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, optionalNullableStringVal, isOptionalNullableStringValNull);
  }

  /**
   * OptionalNullableStringVal
   */
  public NecessityAndNullabilityDto withOptionalNullableStringVal(String optionalNullableStringVal) {
    return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, optionalNullableStringVal, isOptionalNullableStringValNull);
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final NecessityAndNullabilityDto other = (NecessityAndNullabilityDto) obj;
    return Objects.equals(requiredStringVal, other.requiredStringVal)
        && Objects.equals(requiredNullableStringVal, other.requiredNullableStringVal)
        && Objects.equals(isRequiredNullableStringValPresent, other.isRequiredNullableStringValPresent)
        && Objects.equals(optionalStringVal, other.optionalStringVal)
        && Objects.equals(optionalNullableStringVal, other.optionalNullableStringVal)
        && Objects.equals(isOptionalNullableStringValNull, other.isOptionalNullableStringValNull);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      requiredStringVal,
      requiredNullableStringVal,
      isRequiredNullableStringValPresent,
      optionalStringVal,
      optionalNullableStringVal,
      isOptionalNullableStringValNull
    );
  }

  @Override
  public String toString() {
    return "NecessityAndNullabilityDto{" +
      "requiredStringVal=" + requiredStringVal +
      ", requiredNullableStringVal=" + requiredNullableStringVal +
      ", isRequiredNullableStringValPresent=" + isRequiredNullableStringValPresent +
      ", optionalStringVal=" + optionalStringVal +
      ", optionalNullableStringVal=" + optionalNullableStringVal +
      ", isOptionalNullableStringValNull=" + isOptionalNullableStringValNull +
      "}";
  }

  public static Builder newBuilder() {
    return new Builder();
  }

  @JsonPOJOBuilder(withPrefix = "")
  public static final class Builder {

    private String requiredStringVal;
    private String requiredNullableStringVal;
    private boolean isRequiredNullableStringValPresent = false;
    private String optionalStringVal;
    private String optionalNullableStringVal;
    private boolean isOptionalNullableStringValNull = false;

    /**
     * RequiredStringVal
     */
    public Builder setRequiredStringVal(String requiredStringVal) {
      this.requiredStringVal = requiredStringVal;
      return this;
    }

    /**
     * RequiredNullableStringVal
     */
    public Builder setRequiredNullableStringVal(String requiredNullableStringVal) {
      this.requiredNullableStringVal = requiredNullableStringVal;
      this.isRequiredNullableStringValPresent = true;
      return this;
    }

    /**
     * OptionalStringVal
     */
    public Builder setOptional(String optionalStringVal) {
      this.optionalStringVal = optionalStringVal;
      return this;
    }

    /**
     * OptionalStringVal
     */
    public Builder setOptional(Optional<String> optionalStringVal) {
      this.optionalStringVal = optionalStringVal.orElse(null);
      return this;
    }

    /**
     * OptionalNullableStringVal
     */
    public Builder setOptionalNullableStringVal(String optionalNullableStringVal) {
      this.optionalNullableStringVal = optionalNullableStringVal;
      if (optionalNullableStringVal == null) {
        this.isOptionalNullableStringValNull = true;
      }
      return this;
    }

    /**
     * OptionalNullableStringVal
     */
    public Builder setOptionalNullableStringVal(Optional<String> optionalNullableStringVal) {
      this.optionalNullableStringVal = optionalNullableStringVal.orElse(null);
      return this;
    }

    public NecessityAndNullabilityDto build() {
      return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, optionalNullableStringVal, isOptionalNullableStringValNull);
    }
  }
}