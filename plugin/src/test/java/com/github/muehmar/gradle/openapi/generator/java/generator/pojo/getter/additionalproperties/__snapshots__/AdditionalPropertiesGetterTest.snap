additionalPropertiesTypeIsList=[
com.fasterxml.jackson.annotation.JsonAnyGetter
com.fasterxml.jackson.annotation.JsonIgnore
com.github.muehmar.openapi.util.AdditionalProperty
java.util.HashMap
java.util.List
java.util.Map
java.util.Optional
java.util.stream.Collectors
java.util.stream.Stream

@JsonAnyGetter
private Map<String, List<String>> getAdditionalProperties_() {
  final Map<String, List<String>> props = new HashMap<>();
  additionalProperties.forEach(
      (key, value) ->
          castAdditionalProperty(value).ifPresent(v -> props.put(key, v)));
  return props;
}

@JsonIgnore
public List<AdditionalProperty<List<String>>> getAdditionalProperties() {
  return additionalProperties.entrySet().stream()
      .flatMap(
          entry -> 
              castAdditionalProperty(entry.getValue())
                  .map(val -> new AdditionalProperty<>(entry.getKey(), val))
                  .map(Stream::of)
                  .orElseGet(Stream::empty))
      .collect(Collectors.toList());
}

/**
 * Returns the additional property with {@code key} wrapped in an {@link Optional}
 * if present, {@link Optional#empty()} otherwise
 */
public Optional<List<String>> getAdditionalProperty(String key) {
  return Optional.ofNullable(additionalProperties.get(key))
      .flatMap(this::castAdditionalProperty);
}

private Optional<List<String>> castAdditionalProperty(Object property) {
  try {
    return Optional.of((List<String>) property);
  } catch (ClassCastException e) {
    return Optional.empty();
  }
}
]


additionalPropertiesTypeIsObject=[
com.fasterxml.jackson.annotation.JsonAnyGetter
com.fasterxml.jackson.annotation.JsonIgnore
com.github.muehmar.openapi.util.AdditionalProperty
java.util.HashMap
java.util.List
java.util.Map
java.util.Optional
java.util.stream.Collectors
java.util.stream.Stream
javax.validation.Valid

@JsonAnyGetter
private Map<String, @Valid ObjectDto> getAdditionalProperties_() {
  final Map<String, ObjectDto> props = new HashMap<>();
  additionalProperties.forEach(
      (key, value) ->
          castAdditionalProperty(value).ifPresent(v -> props.put(key, v)));
  return props;
}

@JsonIgnore
public List<AdditionalProperty<ObjectDto>> getAdditionalProperties() {
  return additionalProperties.entrySet().stream()
      .flatMap(
          entry -> 
              castAdditionalProperty(entry.getValue())
                  .map(val -> new AdditionalProperty<>(entry.getKey(), val))
                  .map(Stream::of)
                  .orElseGet(Stream::empty))
      .collect(Collectors.toList());
}

/**
 * Returns the additional property with {@code key} wrapped in an {@link Optional}
 * if present, {@link Optional#empty()} otherwise
 */
public Optional<ObjectDto> getAdditionalProperty(String key) {
  return Optional.ofNullable(additionalProperties.get(key))
      .flatMap(this::castAdditionalProperty);
}

private Optional<ObjectDto> castAdditionalProperty(Object property) {
  try {
    return Optional.of((ObjectDto) property);
  } catch (ClassCastException e) {
    return Optional.empty();
  }
}
]


additionalPropertiesTypeIsStringWithConstraints=[
com.fasterxml.jackson.annotation.JsonAnyGetter
com.fasterxml.jackson.annotation.JsonIgnore
com.github.muehmar.openapi.util.AdditionalProperty
java.util.HashMap
java.util.List
java.util.Map
java.util.Optional
java.util.stream.Collectors
java.util.stream.Stream
javax.validation.constraints.Pattern
javax.validation.constraints.Size

@JsonAnyGetter
private Map<String, @Size(min = 5) @Pattern(regexp="pattern") String> getAdditionalProperties_() {
  final Map<String, String> props = new HashMap<>();
  additionalProperties.forEach(
      (key, value) ->
          castAdditionalProperty(value).ifPresent(v -> props.put(key, v)));
  return props;
}

@JsonIgnore
public List<AdditionalProperty<String>> getAdditionalProperties() {
  return additionalProperties.entrySet().stream()
      .flatMap(
          entry -> 
              castAdditionalProperty(entry.getValue())
                  .map(val -> new AdditionalProperty<>(entry.getKey(), val))
                  .map(Stream::of)
                  .orElseGet(Stream::empty))
      .collect(Collectors.toList());
}

/**
 * Returns the additional property with {@code key} wrapped in an {@link Optional}
 * if present, {@link Optional#empty()} otherwise
 */
public Optional<String> getAdditionalProperty(String key) {
  return Optional.ofNullable(additionalProperties.get(key))
      .flatMap(this::castAdditionalProperty);
}

private Optional<String> castAdditionalProperty(Object property) {
  try {
    return Optional.of((String) property);
  } catch (ClassCastException e) {
    return Optional.empty();
  }
}
]