doubleMember=[
java.math.BigDecimal
javax.validation.constraints.AssertTrue

@AssertTrue(message = "doubleVal is not a multiple of 12.25")
private boolean isDoubleValMultipleOfValid() {
  return doubleVal == null || BigDecimal.valueOf(doubleVal).divideAndRemainder(new BigDecimal("12.25"))[1].signum() == 0;
}

]


floatMember=[
java.math.BigDecimal
javax.validation.constraints.AssertTrue

@AssertTrue(message = "floatVal is not a multiple of 50.5")
private boolean isFloatValMultipleOfValid() {
  return floatVal == null || BigDecimal.valueOf(floatVal).divideAndRemainder(new BigDecimal("50.5"))[1].signum() == 0;
}

]


integerMember=[
javax.validation.constraints.AssertTrue

@AssertTrue(message = "intVal is not a multiple of 50")
private boolean isIntValMultipleOfValid() {
  return intVal == null || intVal % 50L == 0;
}

]


longMember=[
javax.validation.constraints.AssertTrue

@AssertTrue(message = "longVal is not a multiple of 12")
private boolean isLongValMultipleOfValid() {
  return longVal == null || longVal % 12L == 0;
}

]


validationDisabled=[
java.math.BigDecimal

private boolean isIntValMultipleOfValid() {
  return intVal == null || intVal % 50L == 0;
}

private boolean isLongValMultipleOfValid() {
  return longVal == null || longVal % 12L == 0;
}

private boolean isFloatValMultipleOfValid() {
  return floatVal == null || BigDecimal.valueOf(floatVal).divideAndRemainder(new BigDecimal("50.5"))[1].signum() == 0;
}

private boolean isDoubleValMultipleOfValid() {
  return doubleVal == null || BigDecimal.valueOf(doubleVal).divideAndRemainder(new BigDecimal("12.25"))[1].signum() == 0;
}

]