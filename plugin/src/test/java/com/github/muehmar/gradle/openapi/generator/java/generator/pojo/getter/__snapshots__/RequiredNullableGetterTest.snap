com.github.muehmar.gradle.openapi.generator.java.generator.pojo.getter.RequiredNullableGetterTest.generator_when_deprecatedAnnotation_then_correctOutputAndRefs=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonProperty
java.time.LocalDate
java.util.Optional
javax.validation.constraints.AssertTrue

/**
 * Birthdate
 */
@JsonIgnore
public Optional<LocalDate> getBirthdate() {
  return Optional.ofNullable(birthdate);
}

/**
 * Birthdate
 */
@JsonIgnore
public LocalDate getBirthdateOr(LocalDate defaultValue) {
  return this.birthdate == null ? defaultValue : this.birthdate;
}

/**
 * @deprecated This method is intended to be used only by frameworks for validation
 * or serialisation.
 */
@JsonProperty("birthdate")
@Deprecated
public LocalDate getBirthdateRaw() {
  return birthdate;
}

/**
 * @deprecated This method is intended to be used only by frameworks for validation
 * or serialisation.
 */
@AssertTrue(message = "birthdate is required but it is not present")
@Deprecated
public boolean isBirthdatePresent() {
  return isBirthdatePresent;
}
]


com.github.muehmar.gradle.openapi.generator.java.generator.pojo.getter.RequiredNullableGetterTest.generator_when_disabledJacksonAndValidation_then_correctOutputAndRefs=[
java.time.LocalDate
java.util.Optional

/**
 * Birthdate
 */
public Optional<LocalDate> getBirthdate() {
  return Optional.ofNullable(birthdate);
}

/**
 * Birthdate
 */
public LocalDate getBirthdateOr(LocalDate defaultValue) {
  return this.birthdate == null ? defaultValue : this.birthdate;
}
]


com.github.muehmar.gradle.openapi.generator.java.generator.pojo.getter.RequiredNullableGetterTest.generator_when_disabledJackson_then_correctOutputAndRefs=[
java.time.LocalDate
java.util.Optional
javax.validation.constraints.AssertTrue
javax.validation.constraints.Pattern

/**
 * Birthdate
 */
public Optional<LocalDate> getBirthdate() {
  return Optional.ofNullable(birthdate);
}

/**
 * Birthdate
 */
public LocalDate getBirthdateOr(LocalDate defaultValue) {
  return this.birthdate == null ? defaultValue : this.birthdate;
}

@Pattern(regexp="DatePattern")
private LocalDate getBirthdateRaw() {
  return birthdate;
}

@AssertTrue(message = "birthdate is required but it is not present")
private boolean isBirthdatePresent() {
  return isBirthdatePresent;
}
]


com.github.muehmar.gradle.openapi.generator.java.generator.pojo.getter.RequiredNullableGetterTest.generator_when_enabledJackson_then_correctOutputAndRefs=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonProperty
java.time.LocalDate
java.util.Optional
javax.validation.constraints.AssertTrue

/**
 * Birthdate
 */
@JsonIgnore
public Optional<LocalDate> getBirthdate() {
  return Optional.ofNullable(birthdate);
}

/**
 * Birthdate
 */
@JsonIgnore
public LocalDate getBirthdateOr(LocalDate defaultValue) {
  return this.birthdate == null ? defaultValue : this.birthdate;
}

@JsonProperty("birthdate")
private LocalDate getBirthdateRaw() {
  return birthdate;
}

@AssertTrue(message = "birthdate is required but it is not present")
private boolean isBirthdatePresent() {
  return isBirthdatePresent;
}
]


com.github.muehmar.gradle.openapi.generator.java.generator.pojo.getter.RequiredNullableGetterTest.generator_when_requiredNullableSuffix_then_correctOutputAndRefs=[
java.time.LocalDate
java.util.Optional

/**
 * Birthdate
 */
public Optional<LocalDate> getBirthdateReqNull() {
  return Optional.ofNullable(birthdate);
}

/**
 * Birthdate
 */
public LocalDate getBirthdateOr(LocalDate defaultValue) {
  return this.birthdate == null ? defaultValue : this.birthdate;
}
]