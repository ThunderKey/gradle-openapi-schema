anyOfAndOneOfPojo=[
com.fasterxml.jackson.annotation.JsonIgnore
java.util.ArrayList
java.util.List
javax.validation.Valid

@Valid
@JsonIgnore
private List<Object> getInvalidOneOfDtos() {
  final List<Object> dtos = new ArrayList<>();
  if(getOneOfValidCount() != 1) {
    dtos.add(asSampleObjectPojo1Dto());
    dtos.add(asSampleObjectPojo2Dto());
  }
  return dtos;
}

@Valid
@JsonIgnore
private List<Object> getInvalidAnyOfDtos() {
  final List<Object> dtos = new ArrayList<>();
  if(getAnyOfValidCount() == 0) {
    dtos.add(asSampleObjectPojo1Dto());
    dtos.add(asSampleObjectPojo2Dto());
  }
  return dtos;
}
]


anyOfPojo=[
com.fasterxml.jackson.annotation.JsonIgnore
java.util.ArrayList
java.util.List
javax.validation.Valid
.
.
@Valid
@JsonIgnore
private List<Object> getInvalidAnyOfDtos() {
  final List<Object> dtos = new ArrayList<>();
  if(getAnyOfValidCount() == 0) {
    dtos.add(asSampleObjectPojo1Dto());
    dtos.add(asSampleObjectPojo2Dto());
  }
  return dtos;
}
]


oneOfPojo=[
com.fasterxml.jackson.annotation.JsonIgnore
java.util.ArrayList
java.util.List
javax.validation.Valid

@Valid
@JsonIgnore
private List<Object> getInvalidOneOfDtos() {
  final List<Object> dtos = new ArrayList<>();
  if(getOneOfValidCount() != 1) {
    dtos.add(asSampleObjectPojo1Dto());
    dtos.add(asSampleObjectPojo2Dto());
  }
  return dtos;
}

]