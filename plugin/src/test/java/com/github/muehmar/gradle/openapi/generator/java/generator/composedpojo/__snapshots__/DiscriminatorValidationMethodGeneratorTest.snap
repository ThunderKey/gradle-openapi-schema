DiscriminatorWithMapping[ANY_OF]=[
@AssertTrue(message = "Not valid against the schema described by the discriminator")
@JsonIgnore
private boolean isValidAgainstTheCorrectSchema() {
  if (requiredStringVal == null) {
    return false;
  }
  switch(requiredStringVal) {
    case "UserValue": return isValidAgainstUserDto();
    case "NNVariantsValue": return isValidAgainstNecessityAndNullabilityDto();
  }
  return false;
}
]


DiscriminatorWithMapping[ONE_OF]=[
@AssertTrue(message = "Not valid against the schema described by the discriminator")
@JsonIgnore
private boolean isValidAgainstTheCorrectSchema() {
  if (requiredStringVal == null) {
    return false;
  }
  switch(requiredStringVal) {
    case "UserValue": return isValidAgainstUserDto();
    case "NNVariantsValue": return isValidAgainstNecessityAndNullabilityDto();
  }
  return false;
}
]


DiscriminatorWithoutMappingWithProtectedAndDeprecatedValidationSettings=[
/**
 * @deprecated This method is intended to be used only by frameworks for
 * validation or serialisation.
 */
@AssertTrue(message = "Not valid against the schema described by the discriminator")
@Deprecated
@JsonIgnore
protected boolean isValidAgainstTheCorrectSchema() {
  if (requiredStringVal == null) {
    return false;
  }
  switch(requiredStringVal) {
    case "User": return isValidAgainstUserDto();
    case "NecessityAndNullability": return isValidAgainstNecessityAndNullabilityDto();
  }
  return false;
}
]


DiscriminatorWithoutMapping[ANY_OF]=[
@AssertTrue(message = "Not valid against the schema described by the discriminator")
@JsonIgnore
private boolean isValidAgainstTheCorrectSchema() {
  if (requiredStringVal == null) {
    return false;
  }
  switch(requiredStringVal) {
    case "User": return isValidAgainstUserDto();
    case "NecessityAndNullability": return isValidAgainstNecessityAndNullabilityDto();
  }
  return false;
}
]


DiscriminatorWithoutMapping[ONE_OF]=[
@AssertTrue(message = "Not valid against the schema described by the discriminator")
@JsonIgnore
private boolean isValidAgainstTheCorrectSchema() {
  if (requiredStringVal == null) {
    return false;
  }
  switch(requiredStringVal) {
    case "User": return isValidAgainstUserDto();
    case "NecessityAndNullability": return isValidAgainstNecessityAndNullabilityDto();
  }
  return false;
}
]


NoDiscriminator[ANY_OF]=[

]


NoDiscriminator[ONE_OF]=[

]