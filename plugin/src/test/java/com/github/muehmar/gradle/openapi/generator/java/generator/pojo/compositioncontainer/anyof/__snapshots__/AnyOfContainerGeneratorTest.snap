anyOfContainer=[
package com.github.muehmar;

import java.util.Objects;

/**
 * This is a container for the any of composition of {@link AnyOfPojo1Dto}. It can
 * hold any instance of {@link SampleObjectPojo1Dto}, {@link
 * NecessityAndNullabilityDto}, {@link SampleObjectPojo2Dto}. Use the
 * corresponding from-factory methods to create an instance for each of the
 * objects and then merge all instances to one using {@link
 * AnyOfPojo1AnyOfContainerDto#merge}. The resulting instance can be used in the
 * builder of {@link AnyOfPojo1Dto}.
 */
public class AnyOfPojo1AnyOfContainerDto {
  private final SampleObjectPojo1Dto sampleObjectPojo1Dto;
  private final NecessityAndNullabilityDto necessityAndNullabilityDto;
  private final SampleObjectPojo2Dto sampleObjectPojo2Dto;

  private AnyOfPojo1AnyOfContainerDto(
      SampleObjectPojo1Dto sampleObjectPojo1Dto,
      NecessityAndNullabilityDto necessityAndNullabilityDto,
      SampleObjectPojo2Dto sampleObjectPojo2Dto
    ) {
    this.sampleObjectPojo1Dto = sampleObjectPojo1Dto;
    this.necessityAndNullabilityDto = necessityAndNullabilityDto;
    this.sampleObjectPojo2Dto = sampleObjectPojo2Dto;
  }

  /**
   * Creates an instance of {@link AnyOfPojo1AnyOfContainerDto} from a {@link
   * SampleObjectPojo1Dto}.
   */
  public static AnyOfPojo1AnyOfContainerDto fromSampleObjectPojo1(SampleObjectPojo1Dto dto) {
    return new AnyOfPojo1AnyOfContainerDto(dto, null, null);
  }

  /**
   * Creates an instance of {@link AnyOfPojo1AnyOfContainerDto} from a {@link
   * NecessityAndNullabilityDto}.
   */
  public static AnyOfPojo1AnyOfContainerDto fromNecessityAndNullability(NecessityAndNullabilityDto dto) {
    return new AnyOfPojo1AnyOfContainerDto(null, dto, null);
  }

  /**
   * Creates an instance of {@link AnyOfPojo1AnyOfContainerDto} from a {@link
   * SampleObjectPojo2Dto}.
   */
  public static AnyOfPojo1AnyOfContainerDto fromSampleObjectPojo2(SampleObjectPojo2Dto dto) {
    return new AnyOfPojo1AnyOfContainerDto(null, null, dto);
  }

  /**
   * Creates a new instance of {@link AnyOfPojo1AnyOfContainerDto} additionally
   * populated with {@link SampleObjectPojo1Dto}.
   */
  public AnyOfPojo1AnyOfContainerDto withSampleObjectPojo1(SampleObjectPojo1Dto sampleObjectPojo1Dto) {
    return new AnyOfPojo1AnyOfContainerDto(sampleObjectPojo1Dto, necessityAndNullabilityDto, sampleObjectPojo2Dto);
  }

  /**
   * Creates a new instance of {@link AnyOfPojo1AnyOfContainerDto} additionally
   * populated with {@link NecessityAndNullabilityDto}.
   */
  public AnyOfPojo1AnyOfContainerDto withNecessityAndNullability(NecessityAndNullabilityDto necessityAndNullabilityDto) {
    return new AnyOfPojo1AnyOfContainerDto(sampleObjectPojo1Dto, necessityAndNullabilityDto, sampleObjectPojo2Dto);
  }

  /**
   * Creates a new instance of {@link AnyOfPojo1AnyOfContainerDto} additionally
   * populated with {@link SampleObjectPojo2Dto}.
   */
  public AnyOfPojo1AnyOfContainerDto withSampleObjectPojo2(SampleObjectPojo2Dto sampleObjectPojo2Dto) {
    return new AnyOfPojo1AnyOfContainerDto(sampleObjectPojo1Dto, necessityAndNullabilityDto, sampleObjectPojo2Dto);
  }

  /**
   * Merges another instance of {@link AnyOfPojo1AnyOfContainerDto} with this
   * instance by accumulating all objects both container contains. 
   */
  public AnyOfPojo1AnyOfContainerDto merge(AnyOfPojo1AnyOfContainerDto other) {
    return new AnyOfPojo1AnyOfContainerDto(
      sampleObjectPojo1Dto != null ? sampleObjectPojo1Dto : other.sampleObjectPojo1Dto,
      necessityAndNullabilityDto != null ? necessityAndNullabilityDto : other.necessityAndNullabilityDto,
      sampleObjectPojo2Dto != null ? sampleObjectPojo2Dto : other.sampleObjectPojo2Dto
    );
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final AnyOfPojo1AnyOfContainerDto other = (AnyOfPojo1AnyOfContainerDto) obj;
    return Objects.deepEquals(this.sampleObjectPojo1Dto, other.sampleObjectPojo1Dto)
        && Objects.deepEquals(this.necessityAndNullabilityDto, other.necessityAndNullabilityDto)
        && Objects.deepEquals(this.sampleObjectPojo2Dto, other.sampleObjectPojo2Dto);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      sampleObjectPojo1Dto,
      necessityAndNullabilityDto,
      sampleObjectPojo2Dto
    );
  }

  @Override
  public String toString() {
    return "AnyOfPojo1AnyOfContainerDto{" +
      "sampleObjectPojo1Dto=" + sampleObjectPojo1Dto + ", " +
      "necessityAndNullabilityDto=" + necessityAndNullabilityDto + ", " +
      "sampleObjectPojo2Dto=" + sampleObjectPojo2Dto +
      "}";
  }
}
]