ComposedPojoGenerator[ANY_OF,null]=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.github.muehmar.openapi.util.JacksonNullContainer;
import com.github.muehmar.openapi.util.Tristate;
import java.time.LocalDate;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * Composition Description
 */
@JsonDeserialize(builder = ComposedAnyofDto.Builder.class)
public class ComposedAnyofDto {
  private final String username;
  private final LocalDate birthdate;
  private final String requiredStringVal;
  private final String requiredNullableStringVal;
  private final boolean isRequiredNullableStringValPresent;
  private final String optionalStringVal;
  private final String optionalNullableStringVal;
  private final boolean isOptionalNullableStringValNull;
  private final Map<String, Object> additionalProperties;

  public ComposedAnyofDto(
      String username,
      LocalDate birthdate,
      String requiredStringVal,
      String requiredNullableStringVal,
      boolean isRequiredNullableStringValPresent,
      String optionalStringVal,
      String optionalNullableStringVal,
      boolean isOptionalNullableStringValNull,
      Map<String, Object> additionalProperties
    ) {
    this.username = username;
    this.birthdate = birthdate;
    this.requiredStringVal = requiredStringVal;
    this.requiredNullableStringVal = requiredNullableStringVal;
    this.isRequiredNullableStringValPresent = isRequiredNullableStringValPresent;
    this.optionalStringVal = optionalStringVal;
    this.optionalNullableStringVal = optionalNullableStringVal;
    this.isOptionalNullableStringValNull = isOptionalNullableStringValNull;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  @JsonProperty("username")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getUsername() {
    return username;
  }

  @JsonProperty("birthdate")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getBirthdate() {
    return birthdate;
  }

  @JsonProperty("requiredStringVal")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getRequiredStringVal() {
    return requiredStringVal;
  }

  @JsonProperty("requiredNullableStringVal")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getRequiredNullableStringVal() {
    return isRequiredNullableStringValPresent ? new JacksonNullContainer<>(requiredNullableStringVal) : null;
  }

  @JsonProperty("optionalStringVal")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getOptionalStringVal() {
    return optionalStringVal;
  }

  @JsonProperty("optionalNullableStringVal")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getOptionalNullableStringVal() {
    return isOptionalNullableStringValNull ? new JacksonNullContainer<>(optionalNullableStringVal) : optionalNullableStringVal;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      username,
      birthdate,
      requiredStringVal,
      requiredNullableStringVal,
      isRequiredNullableStringValPresent,
      optionalStringVal,
      optionalNullableStringVal,
      isOptionalNullableStringValNull,
      additionalProperties
    );
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final ComposedAnyofDto other = (ComposedAnyofDto) obj;
    return Objects.deepEquals(this.username, other.username)
        && Objects.deepEquals(this.birthdate, other.birthdate)
        && Objects.deepEquals(this.requiredStringVal, other.requiredStringVal)
        && Objects.deepEquals(this.requiredNullableStringVal, other.requiredNullableStringVal)
        && Objects.deepEquals(this.isRequiredNullableStringValPresent, other.isRequiredNullableStringValPresent)
        && Objects.deepEquals(this.optionalStringVal, other.optionalStringVal)
        && Objects.deepEquals(this.optionalNullableStringVal, other.optionalNullableStringVal)
        && Objects.deepEquals(this.isOptionalNullableStringValNull, other.isOptionalNullableStringValNull)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public String toString() {
    return "ComposedAnyofDto{" +
      "username=" + "'" + username + "'" + ", " +
      "birthdate=" + birthdate + ", " +
      "requiredStringVal=" + "'" + requiredStringVal + "'" + ", " +
      "requiredNullableStringVal=" + "'" + requiredNullableStringVal + "'" + ", " +
      "isRequiredNullableStringValPresent=" + isRequiredNullableStringValPresent + ", " +
      "optionalStringVal=" + "'" + optionalStringVal + "'" + ", " +
      "optionalNullableStringVal=" + "'" + optionalNullableStringVal + "'" + ", " +
      "isOptionalNullableStringValNull=" + isOptionalNullableStringValNull + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private String username;
    private LocalDate birthdate;
    private String requiredStringVal;
    private String requiredNullableStringVal;
    private boolean isRequiredNullableStringValPresent = false;
    private String optionalStringVal;
    private String optionalNullableStringVal;
    private boolean isOptionalNullableStringValNull = false;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * Username
     */
    @JsonProperty("username")
    private Builder setUsername(String username) {
      this.username = username;
      return this;
    }

    /**
     * Birthdate
     */
    @JsonProperty("birthdate")
    private Builder setBirthdate(LocalDate birthdate) {
      this.birthdate = birthdate;
      return this;
    }

    /**
     * RequiredStringVal
     */
    @JsonProperty("requiredStringVal")
    private Builder setRequiredStringVal(String requiredStringVal) {
      this.requiredStringVal = requiredStringVal;
      return this;
    }

    /**
     * RequiredNullableStringVal
     */
    @JsonProperty("requiredNullableStringVal")
    private Builder setRequiredNullableStringVal(String requiredNullableStringVal) {
      this.requiredNullableStringVal = requiredNullableStringVal;
      this.isRequiredNullableStringValPresent = true;
      return this;
    }

    /**
     * RequiredNullableStringVal
     */
    private Builder setRequiredNullableStringVal(Optional<String> requiredNullableStringVal) {
      this.requiredNullableStringVal = requiredNullableStringVal.orElse(null);
      this.isRequiredNullableStringValPresent = true;
      return this;
    }

    /**
     * OptionalStringVal
     */
    @JsonProperty("optionalStringVal")
    public Builder setOptionalStringVal(String optionalStringVal) {
      this.optionalStringVal = optionalStringVal;
      return this;
    }

    /**
     * OptionalStringVal
     */
    public Builder setOptionalStringVal(Optional<String> optionalStringVal) {
      this.optionalStringVal = optionalStringVal.orElse(null);
      return this;
    }

    /**
     * OptionalNullableStringVal
     */
    @JsonProperty("optionalNullableStringVal")
    public Builder setOptionalNullableStringVal(String optionalNullableStringVal) {
      this.optionalNullableStringVal = optionalNullableStringVal;
      this.isOptionalNullableStringValNull = optionalNullableStringVal == null;
      return this;
    }

    /**
     * OptionalNullableStringVal
     */
    public Builder setOptionalNullableStringVal(Tristate<String> optionalNullableStringVal) {
      this.optionalNullableStringVal = optionalNullableStringVal.onValue(val -> val).onNull(() -> null).onAbsent(() -> null);
      this.isOptionalNullableStringValNull = optionalNullableStringVal.onValue(ignore -> false).onNull(() -> true).onAbsent(() -> false);
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public ComposedAnyofDto build() {
      return new ComposedAnyofDto(username, birthdate, requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, optionalNullableStringVal, isOptionalNullableStringValNull, additionalProperties);
    }
  }
}
]


ComposedPojoGenerator[ONE_OF,Discriminator(propertyName->requiredStringVal, mapping->Optional({UserValue->User, NNVariantsValue->NecessityAndNullability}))]=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.github.muehmar.openapi.util.JacksonNullContainer;
import com.github.muehmar.openapi.util.Tristate;
import java.time.LocalDate;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * Composition Description
 */
@JsonDeserialize(builder = ComposedOneofDto.Builder.class)
public class ComposedOneofDto {
  private final String username;
  private final LocalDate birthdate;
  private final String requiredStringVal;
  private final String requiredNullableStringVal;
  private final boolean isRequiredNullableStringValPresent;
  private final String optionalStringVal;
  private final String optionalNullableStringVal;
  private final boolean isOptionalNullableStringValNull;
  private final Map<String, Object> additionalProperties;

  public ComposedOneofDto(
      String username,
      LocalDate birthdate,
      String requiredStringVal,
      String requiredNullableStringVal,
      boolean isRequiredNullableStringValPresent,
      String optionalStringVal,
      String optionalNullableStringVal,
      boolean isOptionalNullableStringValNull,
      Map<String, Object> additionalProperties
    ) {
    this.username = username;
    this.birthdate = birthdate;
    this.requiredStringVal = requiredStringVal;
    this.requiredNullableStringVal = requiredNullableStringVal;
    this.isRequiredNullableStringValPresent = isRequiredNullableStringValPresent;
    this.optionalStringVal = optionalStringVal;
    this.optionalNullableStringVal = optionalNullableStringVal;
    this.isOptionalNullableStringValNull = isOptionalNullableStringValNull;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  @JsonProperty("username")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getUsername() {
    return username;
  }

  @JsonProperty("birthdate")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getBirthdate() {
    return birthdate;
  }

  @JsonProperty("requiredStringVal")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getRequiredStringVal() {
    return requiredStringVal;
  }

  @JsonProperty("requiredNullableStringVal")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getRequiredNullableStringVal() {
    return isRequiredNullableStringValPresent ? new JacksonNullContainer<>(requiredNullableStringVal) : null;
  }

  @JsonProperty("optionalStringVal")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getOptionalStringVal() {
    return optionalStringVal;
  }

  @JsonProperty("optionalNullableStringVal")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getOptionalNullableStringVal() {
    return isOptionalNullableStringValNull ? new JacksonNullContainer<>(optionalNullableStringVal) : optionalNullableStringVal;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      username,
      birthdate,
      requiredStringVal,
      requiredNullableStringVal,
      isRequiredNullableStringValPresent,
      optionalStringVal,
      optionalNullableStringVal,
      isOptionalNullableStringValNull,
      additionalProperties
    );
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final ComposedOneofDto other = (ComposedOneofDto) obj;
    return Objects.deepEquals(this.username, other.username)
        && Objects.deepEquals(this.birthdate, other.birthdate)
        && Objects.deepEquals(this.requiredStringVal, other.requiredStringVal)
        && Objects.deepEquals(this.requiredNullableStringVal, other.requiredNullableStringVal)
        && Objects.deepEquals(this.isRequiredNullableStringValPresent, other.isRequiredNullableStringValPresent)
        && Objects.deepEquals(this.optionalStringVal, other.optionalStringVal)
        && Objects.deepEquals(this.optionalNullableStringVal, other.optionalNullableStringVal)
        && Objects.deepEquals(this.isOptionalNullableStringValNull, other.isOptionalNullableStringValNull)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public String toString() {
    return "ComposedOneofDto{" +
      "username=" + "'" + username + "'" + ", " +
      "birthdate=" + birthdate + ", " +
      "requiredStringVal=" + "'" + requiredStringVal + "'" + ", " +
      "requiredNullableStringVal=" + "'" + requiredNullableStringVal + "'" + ", " +
      "isRequiredNullableStringValPresent=" + isRequiredNullableStringValPresent + ", " +
      "optionalStringVal=" + "'" + optionalStringVal + "'" + ", " +
      "optionalNullableStringVal=" + "'" + optionalNullableStringVal + "'" + ", " +
      "isOptionalNullableStringValNull=" + isOptionalNullableStringValNull + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private String username;
    private LocalDate birthdate;
    private String requiredStringVal;
    private String requiredNullableStringVal;
    private boolean isRequiredNullableStringValPresent = false;
    private String optionalStringVal;
    private String optionalNullableStringVal;
    private boolean isOptionalNullableStringValNull = false;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * Username
     */
    @JsonProperty("username")
    private Builder setUsername(String username) {
      this.username = username;
      return this;
    }

    /**
     * Birthdate
     */
    @JsonProperty("birthdate")
    private Builder setBirthdate(LocalDate birthdate) {
      this.birthdate = birthdate;
      return this;
    }

    /**
     * RequiredStringVal
     */
    @JsonProperty("requiredStringVal")
    private Builder setRequiredStringVal(String requiredStringVal) {
      this.requiredStringVal = requiredStringVal;
      return this;
    }

    /**
     * RequiredNullableStringVal
     */
    @JsonProperty("requiredNullableStringVal")
    private Builder setRequiredNullableStringVal(String requiredNullableStringVal) {
      this.requiredNullableStringVal = requiredNullableStringVal;
      this.isRequiredNullableStringValPresent = true;
      return this;
    }

    /**
     * RequiredNullableStringVal
     */
    private Builder setRequiredNullableStringVal(Optional<String> requiredNullableStringVal) {
      this.requiredNullableStringVal = requiredNullableStringVal.orElse(null);
      this.isRequiredNullableStringValPresent = true;
      return this;
    }

    /**
     * OptionalStringVal
     */
    @JsonProperty("optionalStringVal")
    public Builder setOptionalStringVal(String optionalStringVal) {
      this.optionalStringVal = optionalStringVal;
      return this;
    }

    /**
     * OptionalStringVal
     */
    public Builder setOptionalStringVal(Optional<String> optionalStringVal) {
      this.optionalStringVal = optionalStringVal.orElse(null);
      return this;
    }

    /**
     * OptionalNullableStringVal
     */
    @JsonProperty("optionalNullableStringVal")
    public Builder setOptionalNullableStringVal(String optionalNullableStringVal) {
      this.optionalNullableStringVal = optionalNullableStringVal;
      this.isOptionalNullableStringValNull = optionalNullableStringVal == null;
      return this;
    }

    /**
     * OptionalNullableStringVal
     */
    public Builder setOptionalNullableStringVal(Tristate<String> optionalNullableStringVal) {
      this.optionalNullableStringVal = optionalNullableStringVal.onValue(val -> val).onNull(() -> null).onAbsent(() -> null);
      this.isOptionalNullableStringValNull = optionalNullableStringVal.onValue(ignore -> false).onNull(() -> true).onAbsent(() -> false);
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public ComposedOneofDto build() {
      return new ComposedOneofDto(username, birthdate, requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, optionalNullableStringVal, isOptionalNullableStringValNull, additionalProperties);
    }
  }
}
]


ComposedPojoGenerator[ONE_OF,Discriminator(propertyName->requiredStringVal, mapping->Optional.empty)]=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.github.muehmar.openapi.util.JacksonNullContainer;
import com.github.muehmar.openapi.util.Tristate;
import java.time.LocalDate;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * Composition Description
 */
@JsonDeserialize(builder = ComposedOneofDto.Builder.class)
public class ComposedOneofDto {
  private final String username;
  private final LocalDate birthdate;
  private final String requiredStringVal;
  private final String requiredNullableStringVal;
  private final boolean isRequiredNullableStringValPresent;
  private final String optionalStringVal;
  private final String optionalNullableStringVal;
  private final boolean isOptionalNullableStringValNull;
  private final Map<String, Object> additionalProperties;

  public ComposedOneofDto(
      String username,
      LocalDate birthdate,
      String requiredStringVal,
      String requiredNullableStringVal,
      boolean isRequiredNullableStringValPresent,
      String optionalStringVal,
      String optionalNullableStringVal,
      boolean isOptionalNullableStringValNull,
      Map<String, Object> additionalProperties
    ) {
    this.username = username;
    this.birthdate = birthdate;
    this.requiredStringVal = requiredStringVal;
    this.requiredNullableStringVal = requiredNullableStringVal;
    this.isRequiredNullableStringValPresent = isRequiredNullableStringValPresent;
    this.optionalStringVal = optionalStringVal;
    this.optionalNullableStringVal = optionalNullableStringVal;
    this.isOptionalNullableStringValNull = isOptionalNullableStringValNull;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  @JsonProperty("username")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getUsername() {
    return username;
  }

  @JsonProperty("birthdate")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getBirthdate() {
    return birthdate;
  }

  @JsonProperty("requiredStringVal")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getRequiredStringVal() {
    return requiredStringVal;
  }

  @JsonProperty("requiredNullableStringVal")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getRequiredNullableStringVal() {
    return isRequiredNullableStringValPresent ? new JacksonNullContainer<>(requiredNullableStringVal) : null;
  }

  @JsonProperty("optionalStringVal")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getOptionalStringVal() {
    return optionalStringVal;
  }

  @JsonProperty("optionalNullableStringVal")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getOptionalNullableStringVal() {
    return isOptionalNullableStringValNull ? new JacksonNullContainer<>(optionalNullableStringVal) : optionalNullableStringVal;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      username,
      birthdate,
      requiredStringVal,
      requiredNullableStringVal,
      isRequiredNullableStringValPresent,
      optionalStringVal,
      optionalNullableStringVal,
      isOptionalNullableStringValNull,
      additionalProperties
    );
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final ComposedOneofDto other = (ComposedOneofDto) obj;
    return Objects.deepEquals(this.username, other.username)
        && Objects.deepEquals(this.birthdate, other.birthdate)
        && Objects.deepEquals(this.requiredStringVal, other.requiredStringVal)
        && Objects.deepEquals(this.requiredNullableStringVal, other.requiredNullableStringVal)
        && Objects.deepEquals(this.isRequiredNullableStringValPresent, other.isRequiredNullableStringValPresent)
        && Objects.deepEquals(this.optionalStringVal, other.optionalStringVal)
        && Objects.deepEquals(this.optionalNullableStringVal, other.optionalNullableStringVal)
        && Objects.deepEquals(this.isOptionalNullableStringValNull, other.isOptionalNullableStringValNull)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public String toString() {
    return "ComposedOneofDto{" +
      "username=" + "'" + username + "'" + ", " +
      "birthdate=" + birthdate + ", " +
      "requiredStringVal=" + "'" + requiredStringVal + "'" + ", " +
      "requiredNullableStringVal=" + "'" + requiredNullableStringVal + "'" + ", " +
      "isRequiredNullableStringValPresent=" + isRequiredNullableStringValPresent + ", " +
      "optionalStringVal=" + "'" + optionalStringVal + "'" + ", " +
      "optionalNullableStringVal=" + "'" + optionalNullableStringVal + "'" + ", " +
      "isOptionalNullableStringValNull=" + isOptionalNullableStringValNull + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private String username;
    private LocalDate birthdate;
    private String requiredStringVal;
    private String requiredNullableStringVal;
    private boolean isRequiredNullableStringValPresent = false;
    private String optionalStringVal;
    private String optionalNullableStringVal;
    private boolean isOptionalNullableStringValNull = false;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * Username
     */
    @JsonProperty("username")
    private Builder setUsername(String username) {
      this.username = username;
      return this;
    }

    /**
     * Birthdate
     */
    @JsonProperty("birthdate")
    private Builder setBirthdate(LocalDate birthdate) {
      this.birthdate = birthdate;
      return this;
    }

    /**
     * RequiredStringVal
     */
    @JsonProperty("requiredStringVal")
    private Builder setRequiredStringVal(String requiredStringVal) {
      this.requiredStringVal = requiredStringVal;
      return this;
    }

    /**
     * RequiredNullableStringVal
     */
    @JsonProperty("requiredNullableStringVal")
    private Builder setRequiredNullableStringVal(String requiredNullableStringVal) {
      this.requiredNullableStringVal = requiredNullableStringVal;
      this.isRequiredNullableStringValPresent = true;
      return this;
    }

    /**
     * RequiredNullableStringVal
     */
    private Builder setRequiredNullableStringVal(Optional<String> requiredNullableStringVal) {
      this.requiredNullableStringVal = requiredNullableStringVal.orElse(null);
      this.isRequiredNullableStringValPresent = true;
      return this;
    }

    /**
     * OptionalStringVal
     */
    @JsonProperty("optionalStringVal")
    public Builder setOptionalStringVal(String optionalStringVal) {
      this.optionalStringVal = optionalStringVal;
      return this;
    }

    /**
     * OptionalStringVal
     */
    public Builder setOptionalStringVal(Optional<String> optionalStringVal) {
      this.optionalStringVal = optionalStringVal.orElse(null);
      return this;
    }

    /**
     * OptionalNullableStringVal
     */
    @JsonProperty("optionalNullableStringVal")
    public Builder setOptionalNullableStringVal(String optionalNullableStringVal) {
      this.optionalNullableStringVal = optionalNullableStringVal;
      this.isOptionalNullableStringValNull = optionalNullableStringVal == null;
      return this;
    }

    /**
     * OptionalNullableStringVal
     */
    public Builder setOptionalNullableStringVal(Tristate<String> optionalNullableStringVal) {
      this.optionalNullableStringVal = optionalNullableStringVal.onValue(val -> val).onNull(() -> null).onAbsent(() -> null);
      this.isOptionalNullableStringValNull = optionalNullableStringVal.onValue(ignore -> false).onNull(() -> true).onAbsent(() -> false);
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public ComposedOneofDto build() {
      return new ComposedOneofDto(username, birthdate, requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, optionalNullableStringVal, isOptionalNullableStringValNull, additionalProperties);
    }
  }
}
]


ComposedPojoGenerator[ONE_OF,null]=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.github.muehmar.openapi.util.JacksonNullContainer;
import com.github.muehmar.openapi.util.Tristate;
import java.time.LocalDate;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * Composition Description
 */
@JsonDeserialize(builder = ComposedOneofDto.Builder.class)
public class ComposedOneofDto {
  private final String username;
  private final LocalDate birthdate;
  private final String requiredStringVal;
  private final String requiredNullableStringVal;
  private final boolean isRequiredNullableStringValPresent;
  private final String optionalStringVal;
  private final String optionalNullableStringVal;
  private final boolean isOptionalNullableStringValNull;
  private final Map<String, Object> additionalProperties;

  public ComposedOneofDto(
      String username,
      LocalDate birthdate,
      String requiredStringVal,
      String requiredNullableStringVal,
      boolean isRequiredNullableStringValPresent,
      String optionalStringVal,
      String optionalNullableStringVal,
      boolean isOptionalNullableStringValNull,
      Map<String, Object> additionalProperties
    ) {
    this.username = username;
    this.birthdate = birthdate;
    this.requiredStringVal = requiredStringVal;
    this.requiredNullableStringVal = requiredNullableStringVal;
    this.isRequiredNullableStringValPresent = isRequiredNullableStringValPresent;
    this.optionalStringVal = optionalStringVal;
    this.optionalNullableStringVal = optionalNullableStringVal;
    this.isOptionalNullableStringValNull = isOptionalNullableStringValNull;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  @JsonProperty("username")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getUsername() {
    return username;
  }

  @JsonProperty("birthdate")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getBirthdate() {
    return birthdate;
  }

  @JsonProperty("requiredStringVal")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getRequiredStringVal() {
    return requiredStringVal;
  }

  @JsonProperty("requiredNullableStringVal")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getRequiredNullableStringVal() {
    return isRequiredNullableStringValPresent ? new JacksonNullContainer<>(requiredNullableStringVal) : null;
  }

  @JsonProperty("optionalStringVal")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getOptionalStringVal() {
    return optionalStringVal;
  }

  @JsonProperty("optionalNullableStringVal")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getOptionalNullableStringVal() {
    return isOptionalNullableStringValNull ? new JacksonNullContainer<>(optionalNullableStringVal) : optionalNullableStringVal;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      username,
      birthdate,
      requiredStringVal,
      requiredNullableStringVal,
      isRequiredNullableStringValPresent,
      optionalStringVal,
      optionalNullableStringVal,
      isOptionalNullableStringValNull,
      additionalProperties
    );
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final ComposedOneofDto other = (ComposedOneofDto) obj;
    return Objects.deepEquals(this.username, other.username)
        && Objects.deepEquals(this.birthdate, other.birthdate)
        && Objects.deepEquals(this.requiredStringVal, other.requiredStringVal)
        && Objects.deepEquals(this.requiredNullableStringVal, other.requiredNullableStringVal)
        && Objects.deepEquals(this.isRequiredNullableStringValPresent, other.isRequiredNullableStringValPresent)
        && Objects.deepEquals(this.optionalStringVal, other.optionalStringVal)
        && Objects.deepEquals(this.optionalNullableStringVal, other.optionalNullableStringVal)
        && Objects.deepEquals(this.isOptionalNullableStringValNull, other.isOptionalNullableStringValNull)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public String toString() {
    return "ComposedOneofDto{" +
      "username=" + "'" + username + "'" + ", " +
      "birthdate=" + birthdate + ", " +
      "requiredStringVal=" + "'" + requiredStringVal + "'" + ", " +
      "requiredNullableStringVal=" + "'" + requiredNullableStringVal + "'" + ", " +
      "isRequiredNullableStringValPresent=" + isRequiredNullableStringValPresent + ", " +
      "optionalStringVal=" + "'" + optionalStringVal + "'" + ", " +
      "optionalNullableStringVal=" + "'" + optionalNullableStringVal + "'" + ", " +
      "isOptionalNullableStringValNull=" + isOptionalNullableStringValNull + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private String username;
    private LocalDate birthdate;
    private String requiredStringVal;
    private String requiredNullableStringVal;
    private boolean isRequiredNullableStringValPresent = false;
    private String optionalStringVal;
    private String optionalNullableStringVal;
    private boolean isOptionalNullableStringValNull = false;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * Username
     */
    @JsonProperty("username")
    private Builder setUsername(String username) {
      this.username = username;
      return this;
    }

    /**
     * Birthdate
     */
    @JsonProperty("birthdate")
    private Builder setBirthdate(LocalDate birthdate) {
      this.birthdate = birthdate;
      return this;
    }

    /**
     * RequiredStringVal
     */
    @JsonProperty("requiredStringVal")
    private Builder setRequiredStringVal(String requiredStringVal) {
      this.requiredStringVal = requiredStringVal;
      return this;
    }

    /**
     * RequiredNullableStringVal
     */
    @JsonProperty("requiredNullableStringVal")
    private Builder setRequiredNullableStringVal(String requiredNullableStringVal) {
      this.requiredNullableStringVal = requiredNullableStringVal;
      this.isRequiredNullableStringValPresent = true;
      return this;
    }

    /**
     * RequiredNullableStringVal
     */
    private Builder setRequiredNullableStringVal(Optional<String> requiredNullableStringVal) {
      this.requiredNullableStringVal = requiredNullableStringVal.orElse(null);
      this.isRequiredNullableStringValPresent = true;
      return this;
    }

    /**
     * OptionalStringVal
     */
    @JsonProperty("optionalStringVal")
    public Builder setOptionalStringVal(String optionalStringVal) {
      this.optionalStringVal = optionalStringVal;
      return this;
    }

    /**
     * OptionalStringVal
     */
    public Builder setOptionalStringVal(Optional<String> optionalStringVal) {
      this.optionalStringVal = optionalStringVal.orElse(null);
      return this;
    }

    /**
     * OptionalNullableStringVal
     */
    @JsonProperty("optionalNullableStringVal")
    public Builder setOptionalNullableStringVal(String optionalNullableStringVal) {
      this.optionalNullableStringVal = optionalNullableStringVal;
      this.isOptionalNullableStringValNull = optionalNullableStringVal == null;
      return this;
    }

    /**
     * OptionalNullableStringVal
     */
    public Builder setOptionalNullableStringVal(Tristate<String> optionalNullableStringVal) {
      this.optionalNullableStringVal = optionalNullableStringVal.onValue(val -> val).onNull(() -> null).onAbsent(() -> null);
      this.isOptionalNullableStringValNull = optionalNullableStringVal.onValue(ignore -> false).onNull(() -> true).onAbsent(() -> false);
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public ComposedOneofDto build() {
      return new ComposedOneofDto(username, birthdate, requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, optionalNullableStringVal, isOptionalNullableStringValNull, additionalProperties);
    }
  }
}
]


composedPojoWithEnumInSubPojos=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonDeserialize(builder = ComposedPojoDto.Builder.class)
public class ComposedPojoDto {
  private final String stringVal;
  private final ObjectPojo1Dto.Color color;
  private final Integer intVal;
  private final Map<String, Object> additionalProperties;

  public ComposedPojoDto(
      String stringVal,
      ObjectPojo1Dto.Color color,
      Integer intVal,
      Map<String, Object> additionalProperties
    ) {
    this.stringVal = stringVal;
    this.color = color;
    this.intVal = intVal;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  @JsonProperty("stringVal")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getStringVal() {
    return stringVal;
  }

  @JsonProperty("color")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getColor() {
    return color;
  }

  @JsonProperty("intVal")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getIntVal() {
    return intVal;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      stringVal,
      color,
      intVal,
      additionalProperties
    );
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final ComposedPojoDto other = (ComposedPojoDto) obj;
    return Objects.deepEquals(this.stringVal, other.stringVal)
        && Objects.deepEquals(this.color, other.color)
        && Objects.deepEquals(this.intVal, other.intVal)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public String toString() {
    return "ComposedPojoDto{" +
      "stringVal=" + "'" + stringVal + "'" + ", " +
      "color=" + color + ", " +
      "intVal=" + intVal + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private String stringVal;
    private ObjectPojo1Dto.Color color;
    private Integer intVal;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * stringVal
     */
    @JsonProperty("stringVal")
    private Builder setStringVal(String stringVal) {
      this.stringVal = stringVal;
      return this;
    }

    /**
     * Color
     */
    @JsonProperty("color")
    private Builder setColor(ObjectPojo1Dto.Color color) {
      this.color = color;
      return this;
    }

    /**
     * intVal
     */
    @JsonProperty("intVal")
    private Builder setIntVal(Integer intVal) {
      this.intVal = intVal;
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public ComposedPojoDto build() {
      return new ComposedPojoDto(stringVal, color, intVal, additionalProperties);
    }
  }
}
]