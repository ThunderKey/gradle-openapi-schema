DiscriminatorWithMapping=[
com.fasterxml.jackson.annotation.JsonIgnore
javax.validation.constraints.AssertTrue

@AssertTrue(message = "Not valid against the schema described by the oneOf-discriminator")
@JsonIgnore
private boolean isValidAgainstTheCorrectOneOfSchema() {
  if (stringVal == null) {
    return false;
  }
  switch(stringVal) {
    case "obj1": return isValidAgainstSampleObjectPojo1Dto();
    case "obj2": return isValidAgainstSampleObjectPojo2Dto();
  }
  return false;
}

]


DiscriminatorWithoutMapping=[
com.fasterxml.jackson.annotation.JsonIgnore
javax.validation.constraints.AssertTrue

@AssertTrue(message = "Not valid against the schema described by the oneOf-discriminator")
@JsonIgnore
private boolean isValidAgainstTheCorrectOneOfSchema() {
  if (stringVal == null) {
    return false;
  }
  switch(stringVal) {
    case "SampleObjectPojo1": return isValidAgainstSampleObjectPojo1Dto();
    case "SampleObjectPojo2": return isValidAgainstSampleObjectPojo2Dto();
  }
  return false;
}

]


DiscriminatorWithoutMappingWithProtectedAndDeprecatedValidationSettings=[
com.fasterxml.jackson.annotation.JsonIgnore
javax.validation.constraints.AssertTrue

/**
 * @deprecated This method is intended to be used only by frameworks for validation
 * or serialisation.
 */
@Deprecated
@AssertTrue(message = "Not valid against the schema described by the oneOf-discriminator")
@JsonIgnore
protected boolean isValidAgainstTheCorrectOneOfSchema() {
  if (stringVal == null) {
    return false;
  }
  switch(stringVal) {
    case "obj1": return isValidAgainstSampleObjectPojo1Dto();
    case "obj2": return isValidAgainstSampleObjectPojo2Dto();
  }
  return false;
}

]


EnumDiscriminator=[
com.fasterxml.jackson.annotation.JsonIgnore
javax.validation.constraints.AssertTrue

@AssertTrue(message = "Not valid against the schema described by the oneOf-discriminator")
@JsonIgnore
private boolean isValidAgainstTheCorrectOneOfSchema() {
  if (color == null) {
    return false;
  }
  switch(color.getValue()) {
    case "yellow": return isValidAgainstYellowDto();
    case "orange": return isValidAgainstOrangeDto();
  }
  return false;
}

]


IllegalIdentifierPojoDiscriminatorWithoutMapping=[
com.fasterxml.jackson.annotation.JsonIgnore
javax.validation.constraints.AssertTrue

@AssertTrue(message = "Not valid against the schema described by the oneOf-discriminator")
@JsonIgnore
private boolean isValidAgainstTheCorrectOneOfSchema() {
  if (switch_ == null) {
    return false;
  }
  switch(switch_) {
    case "Illegal?Identifier": return isValidAgainstIllegal_IdentifierDto();
    case "Illegal?Identifier": return isValidAgainstIllegal_IdentifierDto();
  }
  return false;
}

]


NoDiscriminator=[
.
.

]