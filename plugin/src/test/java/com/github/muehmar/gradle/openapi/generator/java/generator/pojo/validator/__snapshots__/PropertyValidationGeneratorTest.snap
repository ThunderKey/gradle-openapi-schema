byteArraySize=[
.
.
private boolean isStringValValid() {
  if(stringVal != null) {
    return 10 <= stringVal.length
        && stringVal.length <= 50;
  }

  return stringVal != null;
}
]


doubleWithDecimalMinMaxExclusive=[
.
.
private boolean isDoubleValValid() {
  if(doubleVal != null) {
    return 0 < java.math.BigDecimal.valueOf(doubleVal).compareTo(new java.math.BigDecimal("50.1"))
        && java.math.BigDecimal.valueOf(doubleVal).compareTo(new java.math.BigDecimal("100.1") < 0);
  }

  return doubleVal != null;
}
]


doubleWithDecimalMinMaxInclusive=[
.
.
private boolean isDoubleValValid() {
  if(doubleVal != null) {
    return 0 <= java.math.BigDecimal.valueOf(doubleVal).compareTo(new java.math.BigDecimal("50.1"))
        && java.math.BigDecimal.valueOf(doubleVal).compareTo(new java.math.BigDecimal("100.1") <= 0);
  }

  return doubleVal != null;
}
]


integerWithMinAndMax=[
.
.
private boolean isIntValValid() {
  if(intVal != null) {
    return 10 <= intVal
        && intVal <= 50;
  }

  return intVal != null;
}
]


listWithSize=[
.
.
private boolean isListValValid() {
  if(listVal != null) {
    return 10 <= listVal.size()
        && listVal.size() <= 50;
  }

  return listVal != null;
}
]


mapWithSize=[
.
.
private boolean isMapValValid() {
  if(mapVal != null) {
    return 10 <= mapVal.size()
        && mapVal.size() <= 50;
  }

  return mapVal != null;
}
]


stringWithPattern=[
.
.
private boolean isStringValValid() {
  if(stringVal != null) {
    return java.util.regex.Pattern.matches("Hello", stringVal);
  }

  return stringVal != null;
}
]


stringWithSize=[
.
.
private boolean isStringValValid() {
  if(stringVal != null) {
    return 10 <= stringVal.length()
        && stringVal.length() <= 50;
  }

  return stringVal != null;
}
]