ValidCountValidationMethod[ANY_OF,false,jakarta-2,PRIVATE]=[
.
.

]


ValidCountValidationMethod[ANY_OF,true,jakarta-2,PRIVATE]=[
com.fasterxml.jackson.annotation.JsonIgnore
javax.validation.constraints.AssertFalse

@AssertFalse(message = "Is not valid against one of the schemas [User, NecessityAndNullability]")
@JsonIgnore
private boolean isValidAgainstNoSchema() {
  return getValidCount() == 0;
}
]


ValidCountValidationMethod[ANY_OF,true,jakarta-2,PROTECTED]=[
com.fasterxml.jackson.annotation.JsonIgnore
javax.validation.constraints.AssertFalse

@AssertFalse(message = "Is not valid against one of the schemas [User, NecessityAndNullability]")
@Deprecated
@JsonIgnore
protected boolean isValidAgainstNoSchema() {
  return getValidCount() == 0;
}
]


ValidCountValidationMethod[ANY_OF,true,jakarta-3,PRIVATE]=[
com.fasterxml.jackson.annotation.JsonIgnore
jakarta.validation.constraints.AssertFalse

@AssertFalse(message = "Is not valid against one of the schemas [User, NecessityAndNullability]")
@JsonIgnore
private boolean isValidAgainstNoSchema() {
  return getValidCount() == 0;
}
]


ValidCountValidationMethod[ONE_OF,false,jakarta-2,PRIVATE]=[
.
.

]


ValidCountValidationMethod[ONE_OF,true,jakarta-2,PRIVATE]=[
com.fasterxml.jackson.annotation.JsonIgnore
javax.validation.constraints.AssertFalse
com.fasterxml.jackson.annotation.JsonIgnore
javax.validation.constraints.AssertFalse

@AssertFalse(message = "Is not valid against one of the schemas [User, NecessityAndNullability]")
@JsonIgnore
private boolean isValidAgainstNoSchema() {
  return getValidCount() == 0;
}

@AssertFalse(message = "Is valid against more than one of the schemas [User, NecessityAndNullability]")
@JsonIgnore
private boolean isValidAgainstMoreThanOneSchema() {
  return getValidCount() > 1;
}
]


ValidCountValidationMethod[ONE_OF,true,jakarta-2,PROTECTED]=[
com.fasterxml.jackson.annotation.JsonIgnore
javax.validation.constraints.AssertFalse
com.fasterxml.jackson.annotation.JsonIgnore
javax.validation.constraints.AssertFalse

@AssertFalse(message = "Is not valid against one of the schemas [User, NecessityAndNullability]")
@Deprecated
@JsonIgnore
protected boolean isValidAgainstNoSchema() {
  return getValidCount() == 0;
}

@AssertFalse(message = "Is valid against more than one of the schemas [User, NecessityAndNullability]")
@Deprecated
@JsonIgnore
protected boolean isValidAgainstMoreThanOneSchema() {
  return getValidCount() > 1;
}
]


ValidCountValidationMethod[ONE_OF,true,jakarta-3,PRIVATE]=[
com.fasterxml.jackson.annotation.JsonIgnore
jakarta.validation.constraints.AssertFalse
com.fasterxml.jackson.annotation.JsonIgnore
jakarta.validation.constraints.AssertFalse

@AssertFalse(message = "Is not valid against one of the schemas [User, NecessityAndNullability]")
@JsonIgnore
private boolean isValidAgainstNoSchema() {
  return getValidCount() == 0;
}

@AssertFalse(message = "Is valid against more than one of the schemas [User, NecessityAndNullability]")
@JsonIgnore
private boolean isValidAgainstMoreThanOneSchema() {
  return getValidCount() > 1;
}
]