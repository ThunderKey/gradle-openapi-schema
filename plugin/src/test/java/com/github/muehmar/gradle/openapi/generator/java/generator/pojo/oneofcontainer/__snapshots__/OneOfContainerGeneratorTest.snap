oneOfComposition=[
package com.github.muehmar;

import java.util.Objects;

/**
 * TODO
 */
public class InvoiceOneOfContainerDto {
  private final SampleObjectPojo1Dto sampleObjectPojo1Dto;
  private final SampleObjectPojo2Dto sampleObjectPojo2Dto;

  private InvoiceOneOfContainerDto(
      SampleObjectPojo1Dto sampleObjectPojo1Dto,
      SampleObjectPojo2Dto sampleObjectPojo2Dto
    ) {
    this.sampleObjectPojo1Dto = sampleObjectPojo1Dto;
    this.sampleObjectPojo2Dto = sampleObjectPojo2Dto;
  }

  /**
   * Creates an instance of {@link InvoiceOneOfContainerDto} from a {@link
   * SampleObjectPojo1Dto}.
   */
  public static InvoiceOneOfContainerDto fromSampleObjectPojo1(SampleObjectPojo1Dto dto) {
    return new InvoiceOneOfContainerDto(dto, null);
  }

  /**
   * Creates an instance of {@link InvoiceOneOfContainerDto} from a {@link
   * SampleObjectPojo2Dto}.
   */
  public static InvoiceOneOfContainerDto fromSampleObjectPojo2(SampleObjectPojo2Dto dto) {
    return new InvoiceOneOfContainerDto(null, dto);
  }

  SampleObjectPojo1Dto getSampleObjectPojo1Dto() {
    return sampleObjectPojo1Dto;
  }

  SampleObjectPojo2Dto getSampleObjectPojo2Dto() {
    return sampleObjectPojo2Dto;
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final InvoiceOneOfContainerDto other = (InvoiceOneOfContainerDto) obj;
    return Objects.deepEquals(this.sampleObjectPojo1Dto, other.sampleObjectPojo1Dto)
        && Objects.deepEquals(this.sampleObjectPojo2Dto, other.sampleObjectPojo2Dto);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      sampleObjectPojo1Dto,
      sampleObjectPojo2Dto
    );
  }

  @Override
  public String toString() {
    return "InvoiceOneOfContainerDto{" +
      "sampleObjectPojo1Dto=" + sampleObjectPojo1Dto + ", " +
      "sampleObjectPojo2Dto=" + sampleObjectPojo2Dto +
      "}";
  }
}
]