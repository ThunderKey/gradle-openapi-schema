oneOfComposition=[
package com.github.muehmar;

import java.time.LocalDate;
import java.util.Collections;
import java.util.Map;
import java.util.Objects;

/**
 * TODO
 */
public class InvoiceOneOfContainerDto {
  private final String stringVal;
  private final Integer intVal;
  private final Double doubleVal;
  private final LocalDate birthdate;
  private final String email;
  private final Map<String, Object> additionalProperties;

  private InvoiceDto(
      String stringVal,
      Integer intVal,
      Double doubleVal,
      LocalDate birthdate,
      String email,
      Map<String, Object> additionalProperties
    ) {
    this.stringVal = stringVal;
    this.intVal = intVal;
    this.doubleVal = doubleVal;
    this.birthdate = birthdate;
    this.email = email;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * Creates an instance of {@link InvoiceOneOfContainerDto} from a {@link
   * SampleObjectPojo1Dto}.
   */
  public static InvoiceOneOfContainerDto fromSampleObjectPojo1(SampleObjectPojo1Dto dto) {
    return new InvoiceOneOfContainerDto(
      dto.getStringVal(),
      dto.getIntVal(),
      dto.getDoubleVal(),
      null,
      null,
      dto.getAdditionalProperties()
    );
  }

  /**
   * Creates an instance of {@link InvoiceOneOfContainerDto} from a {@link
   * SampleObjectPojo2Dto}.
   */
  public static InvoiceOneOfContainerDto fromSampleObjectPojo2(SampleObjectPojo2Dto dto) {
    return new InvoiceOneOfContainerDto(
      dto.getStringVal(),
      null,
      null,
      dto.getBirthdate(),
      dto.getEmail(),
      dto.getAdditionalProperties()
    );
  }

  String getStringVal() {
    return stringVal;
  }

  Integer getIntVal() {
    return intVal;
  }

  Double getDoubleVal() {
    return doubleVal;
  }

  LocalDate getBirthdate() {
    return birthdate;
  }

  String getEmail() {
    return email;
  }

  Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final InvoiceDto other = (InvoiceDto) obj;
    return Objects.deepEquals(this.stringVal, other.stringVal)
        && Objects.deepEquals(this.intVal, other.intVal)
        && Objects.deepEquals(this.doubleVal, other.doubleVal)
        && Objects.deepEquals(this.birthdate, other.birthdate)
        && Objects.deepEquals(this.email, other.email)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      stringVal,
      intVal,
      doubleVal,
      birthdate,
      email,
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "InvoiceDto{" +
      "stringVal=" + "'" + stringVal + "'" + ", " +
      "intVal=" + intVal + ", " +
      "doubleVal=" + doubleVal + ", " +
      "birthdate=" + birthdate + ", " +
      "email=" + "'" + email + "'" + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }
}
]