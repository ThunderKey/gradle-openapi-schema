byteArraySize=[
.
.
private boolean isStringValValid() {
  if(stringVal != null) {
    return 10 <= stringVal.length
        && stringVal.length <= 50;
  }

  return stringVal != null;
}
]


customObjectType=[
.
.
private boolean isObjectValid() {
  if(object != null) {
    return true;
  }

  return object != null;
}
]


doubleMultipleOf=[
.
.
private boolean isDoubleValValid() {
  if(doubleVal != null) {
    return isDoubleValMultipleOfValid();
  }

  return doubleVal != null;
}
]


doubleWithDecimalMinMaxExclusive=[
java.math.BigDecimal

private boolean isDoubleValValid() {
  if(doubleVal != null) {
    return 0 < BigDecimal.valueOf(doubleVal).compareTo(new BigDecimal("50.1"))
        && BigDecimal.valueOf(doubleVal).compareTo(new BigDecimal("100.1")) < 0;
  }

  return doubleVal != null;
}
]


doubleWithDecimalMinMaxInclusive=[
java.math.BigDecimal

private boolean isDoubleValValid() {
  if(doubleVal != null) {
    return 0 <= BigDecimal.valueOf(doubleVal).compareTo(new BigDecimal("50.1"))
        && BigDecimal.valueOf(doubleVal).compareTo(new BigDecimal("100.1")) <= 0;
  }

  return doubleVal != null;
}
]


integerWithMinAndMax=[
.
.
private boolean isIntValValid() {
  if(intVal != null) {
    return 10 <= intVal
        && intVal <= 50;
  }

  return intVal != null;
}
]


listUniqueItems=[
.
.
private boolean isListValValid() {
  if(listVal != null) {
    return hasListValUniqueItems()
        && listVal.stream().allMatch(this::isListValValueValid);
  }

  return listVal != null;
}

private boolean isListValValueValid(String listValValue) {
  if(listValValue != null) {
    return true;
  }

  return true;
}
]


listWithSize=[
.
.
private boolean isListValValid() {
  if(listVal != null) {
    return 10 <= listVal.size()
        && listVal.size() <= 50
        && listVal.stream().allMatch(this::isListValValueValid);
  }

  return listVal != null;
}

private boolean isListValValueValid(String listValValue) {
  if(listValValue != null) {
    return true;
  }

  return true;
}
]


mapWithListValueType=[
.
.
private boolean isMapValValid() {
  if(mapVal != null) {
    return 10 <= mapVal.size()
        && mapVal.size() <= 50
        && mapVal.values().stream().allMatch(this::isMapValValueValid);
  }

  return mapVal != null;
}

private boolean isMapValValueValid(List<String> mapValValue) {
  if(mapValValue != null) {
    return 8 <= mapValValue.size()
        && mapValValue.stream().allMatch(this::isMapValValueValueValid);
  }

  return true;
}

private boolean isMapValValueValueValid(String mapValValueValue) {
  if(mapValValueValue != null) {
    return mapValValueValue.length() <= 50;
  }

  return true;
}
]


mapWithPropertyCount=[
.
.
private boolean isMapValValid() {
  if(mapVal != null) {
    return 5 <= mapVal.size()
        && mapVal.size() <= 10
        && mapVal.values().stream().allMatch(this::isMapValValueValid);
  }

  return mapVal != null;
}

private boolean isMapValValueValid(String mapValValue) {
  if(mapValValue != null) {
    return true;
  }

  return true;
}
]


mapWithSize=[
.
.
private boolean isMapValValid() {
  if(mapVal != null) {
    return 10 <= mapVal.size()
        && mapVal.size() <= 50
        && mapVal.values().stream().allMatch(this::isMapValValueValid);
  }

  return mapVal != null;
}

private boolean isMapValValueValid(String mapValValue) {
  if(mapValValue != null) {
    return true;
  }

  return true;
}
]


openapiObjectType=[
.
.
private boolean isObjectValid() {
  if(object != null) {
    return object.isValid();
  }

  return object != null;
}
]


stringWithEmail=[
com.github.muehmar.openapi.util.EmailValidator

private boolean isStringValValid() {
  if(stringVal != null) {
    return EmailValidator.isValid(stringVal);
  }

  return stringVal != null;
}
]


stringWithPattern=[
.
.
private boolean isStringValValid() {
  if(stringVal != null) {
    return java.util.regex.Pattern.matches("Hello", stringVal);
  }

  return stringVal != null;
}
]


stringWithSize=[
.
.
private boolean isStringValValid() {
  if(stringVal != null) {
    return 10 <= stringVal.length()
        && stringVal.length() <= 50;
  }

  return stringVal != null;
}
]